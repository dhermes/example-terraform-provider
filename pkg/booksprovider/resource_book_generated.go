// Copyright 2021 Danny Hermes
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package booksprovider

import (
	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/dhermes/example-terraform-provider/pkg/terraform"
)

// NewResourceBook creates a new `ResourceBook` from a Terraform resource
// data struct.
func NewResourceBook(d *schema.ResourceData) (*ResourceBook, error) {
	rb := ResourceBook{d: d}
	err := rb.Populate()
	if err != nil {
		return nil, err
	}

	return &rb, nil
}

// GetTitle is a value accessor for a pointer field; a safe dereference.
// (The goal is to make code that can be autogenerated.)
func (rb *ResourceBook) GetTitle() string {
	rb.mutex.RLock()
	defer rb.mutex.RUnlock()

	if rb.Title == nil {
		return ""
	}
	return *rb.Title
}

// GetAuthorID is a value accessor for a pointer field; a safe dereference.
// (The goal is to make code that can be autogenerated.)
func (rb *ResourceBook) GetAuthorID() uuid.UUID {
	rb.mutex.RLock()
	defer rb.mutex.RUnlock()

	if rb.AuthorID == nil {
		return uuid.Nil
	}
	return *rb.AuthorID
}

// GetPublishDate is a value accessor for a pointer field; a safe dereference.
// (The goal is to make code that can be autogenerated.)
func (rb *ResourceBook) GetPublishDate() Date {
	rb.mutex.RLock()
	defer rb.mutex.RUnlock()

	if rb.PublishDate == nil {
		return Date{}
	}
	return *rb.PublishDate
}

// GetID is a value accessor for a pointer field; a safe dereference.
// (The goal is to make code that can be autogenerated.)
func (rb *ResourceBook) GetID() uuid.UUID {
	rb.mutex.RLock()
	defer rb.mutex.RUnlock()

	if rb.ID == nil {
		return uuid.Nil
	}
	return *rb.ID
}

// Changed detects if any of the user input fields have changed.
// (The goal is to make code that can be autogenerated.)
func (rb *ResourceBook) Changed() bool {
	//    [INPUT] title        | string            | required
	//    [INPUT] author_id    | uuid.UUID->string | required
	//    [INPUT] publish_date | Date->string      | required
	// [COMPUTED] id           | uuid.UUID->string | computed
	return rb.d.HasChange("title") || rb.d.HasChange("author_id") || rb.d.HasChange("publish_date")
}

// Populate populates the fields in this struct based on the `terraform`
// struct tags. (The goal is to make code that can be autogenerated.)
func (rb *ResourceBook) Populate() error {
	rb.mutex.Lock()
	defer rb.mutex.Unlock()

	var err error

	// title | string | required
	title, ok := rb.d.Get("title").(string)
	if !ok {
		err = terraform.DiagnosticError{
			Summary: "Could not determine book title",
			Detail:  "Invalid title parameter type",
		}
		return err
	}

	// author_id | uuid.UUID->string | required
	authorIDStr, ok := rb.d.Get("author_id").(string)
	if !ok {
		err = terraform.DiagnosticError{
			Summary: "Could not determine book author ID",
			Detail:  "Invalid author ID parameter type",
		}
		return err
	}
	authorID, err := idFromString(authorIDStr, "author ID")
	if err != nil {
		return err
	}

	// publish_date | Date->string | required
	publishDateStr, ok := rb.d.Get("publish_date").(string)
	if !ok {
		err = terraform.DiagnosticError{
			Summary: "Could not determine book publish date",
			Detail:  "Invalid publish date parameter type",
		}
		return err
	}
	pd, err := dateFromString(publishDateStr, "publish date")
	if err != nil {
		return err
	}

	// id | uuid.UUID->string | computed
	idStr := rb.d.Id()
	id := rb.ID
	if idStr != "" {
		parsed, err := idFromString(idStr, "ID")
		if err != nil {
			return err
		}
		id = &parsed
	}

	// Only populate fields after all parsing is complete without error.
	rb.Title = &title
	rb.AuthorID = &authorID
	rb.PublishDate = &pd
	rb.ID = id
	return nil
}

// Persist writes back fields in this struct to the Terraform resource data
// struct based on the `terraform` struct tags. (The goal is to make code that
// can be autogenerated.)
//
// NOTE: This method only takes a read lock for the exported fields,
//       `Title`, `AuthorID`, `PublishDate` and `ID`. This method does do
//       some "writes" to `ra.d` but the lock is not intended to make
//       `schema.ResourceData` concurrency-safe (it is already via
//       `MapFieldWriter`).
func (rb *ResourceBook) Persist() error {
	rb.mutex.RLock()
	defer rb.mutex.RUnlock()

	if rb.Title != nil {
		err := rb.d.Set("title", *rb.Title)
		if err != nil {
			return err
		}
	}

	if rb.AuthorID != nil {
		err := rb.d.Set("author_id", rb.AuthorID.String())
		if err != nil {
			return err
		}
	}

	if rb.PublishDate != nil {
		err := rb.d.Set("publish_date", rb.PublishDate.String())
		if err != nil {
			return err
		}
	}

	if rb.ID != nil {
		rb.d.SetId(rb.ID.String())
	}

	return nil
}

// Schema produces the Terraform Schema map. (The goal is to make code that
// can be autogenerated.)
func (*ResourceBook) Schema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		// title | string | required
		"title": {
			Type:     schema.TypeString,
			Required: true,
		},
		// author_id | uuid.UUID->string | required
		"author_id": {
			Type:     schema.TypeString,
			Required: true,
		},
		// publish_date | Date->string | required
		"publish_date": {
			Type:     schema.TypeString,
			Required: true,
		},
		// id | uuid.UUID->string | computed
		"id": {
			Type:     schema.TypeString,
			Computed: true,
		},
	}
}
