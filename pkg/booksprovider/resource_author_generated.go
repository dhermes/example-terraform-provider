// Copyright 2021 Danny Hermes
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package booksprovider

import (
	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/dhermes/example-terraform-provider/pkg/terraform"
)

// NewResourceAuthor creates a new `ResourceAuthor` from a Terraform resource
// data struct.
func NewResourceAuthor(d *schema.ResourceData) ResourceAuthor {
	return ResourceAuthor{d: d}
}

// GetFirstName is a value accessor for a pointer field; a safe dereference.
// (The goal is to make code that can be autogenerated.)
func (ra *ResourceAuthor) GetFirstName() string {
	ra.mutex.RLock()
	defer ra.mutex.RUnlock()

	if ra.FirstName == nil {
		return ""
	}
	return *ra.FirstName
}

// GetLastName is a value accessor for a pointer field; a safe dereference.
// (The goal is to make code that can be autogenerated.)
func (ra *ResourceAuthor) GetLastName() string {
	ra.mutex.RLock()
	defer ra.mutex.RUnlock()

	if ra.LastName == nil {
		return ""
	}
	return *ra.LastName
}

// GetBookCount is a value accessor for a pointer field; a safe dereference.
// (The goal is to make code that can be autogenerated.)
func (ra *ResourceAuthor) GetBookCount() int {
	ra.mutex.RLock()
	defer ra.mutex.RUnlock()

	if ra.BookCount == nil {
		return 0
	}
	return *ra.BookCount
}

// GetID is a value accessor for a pointer field; a safe dereference.
// (The goal is to make code that can be autogenerated.)
func (ra *ResourceAuthor) GetID() uuid.UUID {
	ra.mutex.RLock()
	defer ra.mutex.RUnlock()

	if ra.ID == nil {
		return uuid.Nil
	}
	return *ra.ID
}

// Changed detects if any of the user input fields have changed.
// (The goal is to make code that can be autogenerated.)
func (ra *ResourceAuthor) Changed() bool {
	//       [INPUT] first_name | string            | required
	//       [INPUT] last_name  | string            | required
	// [NOT_EXPOSED] book_count | int               | computed
	// [NOT_EXPOSED] id         | uuid.UUID->string | computed
	return ra.d.HasChange("first_name") || ra.d.HasChange("last_name")
}

// Populate populates the fields in this struct based on the `terraform`
// struct tags. (The goal is to make code that can be autogenerated.)
func (ra *ResourceAuthor) Populate() error {
	ra.mutex.Lock()
	defer ra.mutex.Unlock()

	var err error

	// first_name | string | required
	firstName, ok := ra.d.Get("first_name").(string)
	if !ok {
		err = terraform.DiagnosticError{
			Summary: "Could not determine author first name",
			Detail:  "Invalid first name parameter type",
		}
		return err
	}

	// last_name | string | required
	lastName, ok := ra.d.Get("last_name").(string)
	if !ok {
		err = terraform.DiagnosticError{
			Summary: "Could not determine author last name",
			Detail:  "Invalid last name parameter type",
		}
		return err
	}

	// book_count | int | computed
	bookCount := ra.BookCount
	bookCountInterface := ra.d.Get("book_count")
	if bookCountInterface != nil {
		bc, ok := bookCountInterface.(int)
		if !ok {
			err = terraform.DiagnosticError{
				Summary: "Could not determine author book count",
				Detail:  "Invalid book count parameter type",
			}
			return err
		}
		bookCount = &bc
	}

	// id | uuid.UUID->string | computed
	idStr := ra.d.Id()
	id := ra.ID
	if idStr != "" {
		parsed, err := idFromString(idStr)
		if err != nil {
			return err
		}
		id = &parsed
	}

	// Only populate fields after all parsing is complete without error.
	ra.FirstName = &firstName
	ra.LastName = &lastName
	ra.BookCount = bookCount
	ra.ID = id
	return nil
}

// Persist writes back fields in this struct to the Terraform resource data
// struct based on the `terraform` struct tags. (The goal is to make code that
// can be autogenerated.)
//
// NOTE: This method only takes a read lock for the exported fields,
//       `FirstName`, `LastName`, `BookCount` and `ID`. This method does do
//       some "writes" to `ra.d` but the lock is not intended to make
//       `schema.ResourceData` concurrency-safe (it is already via
//       `MapFieldWriter`).
func (ra *ResourceAuthor) Persist() error {
	ra.mutex.RLock()
	defer ra.mutex.RUnlock()

	if ra.FirstName != nil {
		err := ra.d.Set("first_name", *ra.FirstName)
		if err != nil {
			return err
		}
	}

	if ra.LastName != nil {
		err := ra.d.Set("last_name", *ra.LastName)
		if err != nil {
			return err
		}
	}

	if ra.BookCount != nil {
		err := ra.d.Set("book_count", *ra.BookCount)
		if err != nil {
			return err
		}
	}

	if ra.ID != nil {
		ra.d.SetId(ra.ID.String())
	}

	return nil
}
